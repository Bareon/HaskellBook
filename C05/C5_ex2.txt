Chapter 5.5 Exercises

Given a function and its type, what type results from applying
some or all of the arguments.

1) If type of f is a -> a -> a -> a and the type of x is char
then the type of f x is:
== a) Char -> Char -> Char
b) x -> x -> x -> x
c) a -> a -> a
d) a -> a -> a -> Char

let f :: a -> a -> a -> a; f = undefined
let x :: Char; x = undefined
Prelude> :t f x
f x :: Char -> Char -> Char


2) If type of g is a -> b -> c -> b, then type of
g 0 'c' "woot" is
a) String
b) Char -> String
c) Int
==d) Char

let g :: a -> b -> c -> b; g = undefined
let a = 0 :: Int
let b = 'c' :: Char
let c = "woot" :: String
Prelude> :t g a b c
g a b c :: Char


3) If type h is (Num a, Num b) => a -> b -> b, then the
type of h 1.0 2 is
a) Double
b) Integer
c) Integral b => b
==d) Num b => b

let h :: (Num a, Num b) => a -> b -> b; h = undefined
let a = 1.0
let b = 2
Prelude> :t h a b
h a b :: Num b => b


4) If type h is (Num a, Num b) => a -> b -> b, then the
type of h 1 (5.5 :: Double) is
a) Integer
b) Fractional b => b
==c) Double
d) Num b => b

let h :: (Num a, Num b) => a -> b -> b; h = undefined
let a = 1
let b = 5.5 :: Double
Prelude> :t h a b
h a b :: Double


5) If the type of jackal is (Ord a, Eq b) => a -> b -> a, then
the type of jackal "keyboard" "has the word jackal in it"
==a) [Char]
b) Eq b => b
c) b -> [Char]
d) b
e) Eq b => b -> [Char]

let jackal :: (Ord a, Eq b) => a -> b -> a; jackal = undefined
a = "keyboard"
b = "has the word jackal in it"
Prelude> :t jackal a b
jackal a b :: [Char]


6) If the type of jackal is (Ord a, Eq b) => a -> b -> a, then
the type of jackal "keyboard" 
a) b
b) Eq b => b
c) [Char]
d) b -> [Char]
==e) Eq b => b -> [Char]

let jackal :: (Ord a, Eq b) => a -> b -> a; jackal = undefined
a = "keyboard"
Prelude> :t jackal a
jackal a :: Eq b => b -> [Char]


7) If the type of kessel is (Ord a, Num b) => a -> b -> a, then
the type of kessel 1 2 is
a) Integer
b) Int
c) a
==d) (Num a, Ord a) => a
e) Ord a => a
f) Num a => a

let kessel :: (Ord a, Num b) => a -> b -> a; kessel = undefined
let a = 1
let b = 2
Prelude> :t kessel a b
kessel a b :: (Num a, Ord a) => a

The correct answer is kessel 1 2 :: (Num a, Ord a) => a. From the original
type signature Ord is required. From the application we learn that a is also
constrained by the typeclass Num. Since they are mutually exclusive we need
both in the constraint.


8) If the type of kessel is (Ord a, Num b) => a -> b -> a, then
the type of kessel 1 (2 :: Integer) is
==a) (Num a, Ord a) => a
b) Int
c) a
d) Num a => a
e) Ord a => a
f) Integer

let kessel :: (Ord a, Num b) => a -> b -> a; kessel = undefined
let a = 1
let b = 2 :: Integer
Prelude> :t kessel a b
kessel a b :: (Num a, Ord a) => a


9) If the type of kessel is (Ord a, Num b) => a -> b -> a, then
the type of kessel (1 :: Integer) 2 is
a) Num a => a
b) Ord a => a
==c) Integer
d) (Num a, Ord a) => a
e)  a

let kessel :: (Ord a, Num b) => a -> b -> a; kessel = undefined
let a = 1 :: Integer
let b = 2 
Prelude> :t kessel a b
kessel a b :: Integer
