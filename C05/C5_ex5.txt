-- Chapter 5.9 Exercises

1) A value of type [a] is
a) a list of alphabetic characters
b) a list of lists
==c) a list whose elemets are all of some type a
d) a list whose elements are all of different types

2) A function of type [[a]] -> [a] could
==a) take a list of strings as an argument
b) transform a character into a string
c) transform a string into a list of strings
d) take two arguments

3) A function of type [a] -> Int -> a
a) takes one argument
==b) returns one element of type a from a list
c) must return an Int value
d) is completely fictional

4) A function of type (a,b) -> a
a) takes a list argument and returns a Char value
b) has zero arguments
==c) takes a tuple argument and returns the first value
d) requires that a and b be of different types


--Determine the type
a) (* 9) 6 = 56 :: Num t => t
b) head [(0,"doge"),(1,"kitteh")] = (0,"doge") :: Num t => (t,[Char])
c) head [(0 :: Integer ,"doge"),(1,"kitteh")] = (0,"doge") :: (Integer,[Char])
d)if False then True else False :: False :: Bool
e) length [1,2,3,4,5] = 5 :: Int
f) (length [1,2,3,4]) > (length "TACOCAT") = False :: Bool

2) Given
x = 5
y = x + 5
w = y * 10
What is the type of w?
Num a => a

3) Given
x = 5
y = x + 5
z y = y * 10
What is the type of z?
z :: Num a => a -> a

4) Given
x = 5
y = x + 5
f = 4 / y
What is the type of f?
f :: Fractional a => a

5) Given
x = "Julie"
y = " <3 "
z = "Haskell"
f = x ++ y ++ z
What is the type of f?
f :: [Char]


--Does it compile?
1)
bigNum = (^) 5 $ 10
wahoo = bigNum $ 10

--bigNum takes no arguments, so wahoo will not compile.

2)
x = print
y = princ "woohoo!"
z = x "hello world"

-- y princ is a typo of print

3)
a = (+)
b = 5
c = b 10
d = c 200

-- c and d have no operators. b and c take no arguments either.

4) a = 12 + b
   b = 10000 * c

-- c is not defined


Type variable or specific type constructor?
The choices are fully polymorphic type variable,
constrained polymorphic type variable, or
concrete type constructor.
ex. f :: Num a => a -> b -> Int -> int
ans. constrained polymorphic (Num), fully polymorphic,
concrete, and concrete

2) f :: zed -> Zed -> Blah
fully polymorphic, concrete, concrete

3) f :: Enum b => a -> b -> C
fully polymorphic, constrained polymorphic, concrete

4) f :: f -> g -> C
fully polymorphic, fully polymorphic, concrete


Write a type signature

1)
functionH :: [a] -> a
functionH (x:_) = x

2.
functionC :: Ord a =>  a -> b -> Bool
functionC x y = if (x > y) then True else False

3.
functionS :: (a, b) -> b
functionS (x, y) = y


Given a type, write the function
1)
i :: a -> a
i x = x

2)
c :: a -> b -> a
c x y = x

3)
c'' :: b -> a -> b
c'' y x = y
--equivalent to 2)

4)
c' :: a -> b -> b
c' x y = y

5)
r :: [a] -> [a]
r = tail

6)
co :: (b -> c) -> (a -> b) -> (a -> c)
co = (.)
-- f :: b -> c, g :: a -> b
-- http://stackoverflow.com/questions/22449870/hi-b-c-a-b-a-c-in-haskell

7)
a :: (a -> c) -> a -> a
a f x = x

8)
a' :: (a -> b) -> a -> b
a f x = f x
